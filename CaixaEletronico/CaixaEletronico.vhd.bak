library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity CaixaEletronico is
    Port (
        clk : in std_logic;
        reset : in std_logic;
        confirma_operacao : in std_logic;
        tipo_operacao : in std_logic_vector(1 downto 0); -- 00: Consulta, 01: Depósito, 10: Saque
        valor_operacao : in unsigned(15 downto 0);
        saldo_atual : in unsigned(31 downto 0);
        saldo_novo : out unsigned(31 downto 0);
        status : out std_logic;  -- Indica sucesso ou falha na operação
        estado_atual : out std_logic_vector(2 downto 0) -- Para depuração
    );
end CaixaEletronico;

architecture Behavioral of CaixaEletronico is
    -- Definição dos estados
    type state_type is (IDLE, CONSULTA_SALDO, DEPOSITO, SAQUE, ERRO);
    signal estado : state_type := IDLE;

    -- Sinais internos
    signal saldo_temp : unsigned(31 downto 0) := (others => '0');
begin
    process(clk, reset)
    begin
        if reset = '1' then
            estado <= IDLE;
            saldo_novo <= (others => '0');
            status <= '0';
        elsif rising_edge(clk) then
            case estado is
                when IDLE =>
                    if confirma_operacao = '1' then
                        case tipo_operacao is
                            when "00" => -- Consulta de saldo
                                estado <= CONSULTA_SALDO;
                            when "01" => -- Depósito
                                estado <= DEPOSITO;
                            when "10" => -- Saque
                                estado <= SAQUE;
                            when others =>
                                estado <= ERRO; -- Operação inválida
                        end case;
                    end if;

                when CONSULTA_SALDO =>
                    saldo_novo <= saldo_atual; -- Mostra o saldo atual
                    status <= '1';            -- Operação bem-sucedida
                    estado <= IDLE;           -- Volta ao estado inicial

                when DEPOSITO =>
                    saldo_temp <= saldo_atual + resize(valor_operacao, saldo_atual'length);
                    saldo_novo <= saldo_temp; -- Atualiza o saldo
                    status <= '1';            -- Operação bem-sucedida
                    estado <= IDLE;

                when SAQUE =>
                    if saldo_atual >= resize(valor_operacao, saldo_atual'length) then
                        saldo_temp <= saldo_atual - resize(valor_operacao, saldo_atual'length);
                        saldo_novo <= saldo_temp; -- Atualiza o saldo
                        status <= '1';            -- Operação bem-sucedida
                    else
                        status <= '0';            -- Saldo insuficiente
                        estado <= ERRO;          -- Vai para o estado de erro
                    end if;
                    estado <= IDLE;

                when ERRO =>
                    saldo_novo <= saldo_atual; -- Saldo permanece inalterado
                    estado <= IDLE;            -- Retorna ao estado inicial

                when others =>
                    estado <= IDLE;
            end case;
        end if;
    end process;

    -- Mapeia o estado atual para depuração (opcional)
    with estado select
        estado_atual <=
            "000" when IDLE,
            "001" when CONSULTA_SALDO,
            "010" when DEPOSITO,
            "011" when SAQUE,
            "100" when ERRO,
            "111" when others;
end Behavioral;
